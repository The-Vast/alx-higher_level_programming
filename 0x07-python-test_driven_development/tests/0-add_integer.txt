# 0-add_integer.txt

===============================
 How to Use 0-add_integer.py
===============================

This library is very simple, since it only has one function called
``add_integer()``.

Usage with Numbers
=================

``add_integer()`` returns the sum of its arguments.  For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> from 0-add_integer import add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(4, -9)
    -5

::

    >>> add_integer(-100, 23)

It also works with floating-point values.

::

    >>> add_integer(2.0, 3)
    5

Note that floats are casted to ints before addition is performed

::

    >>> add_integer(10.35, 2.89)
    12

::

    >>> add_integer(-4, -2.0)
    -6

second argument is optional, since the function have a default value of 98 for it

::

    >>> add_integer(-8)
    90

Usage with Non-Numbers
======================

Because ``+`` is not used between on differing data types except int and float combo,
``add_integer()`` expects the two arguments to be integers or floats.
if either of the argument is not float or integer, a TypeError is raised.:



::

    >>> add_integer('a', 3)
    Traceback (most recent last call):
    TypeError: a must be an integer

::

    >>> add_integer(['A', 'B', 'C'], 2)
    Traceback (most recent last call):
    TypeError: a must be an integer

::

    >>> add_integer(4, '10')
    Traceback (most recent last call):
    TypeError: b must be an integer

::

    >>> add_integer(Null)
    Traceback (most recent last call):
    TypeError: a must be an integer

::

    >>> add_integer(6, None)
    Traceback (most recent last call):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
